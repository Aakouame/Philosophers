∑- The program should execute with :
		--> Number of philosophers   == (Number of forks)
		--> Time to die (ms) !(if he doesn't eat before time to die == 0 --> he will die !)
		--> time to eat (ms) !(during that time , he hold the forks until he stop eat)
		--> time to sleep (ms) 
		--> number of time each philosopher must eat  !(: If all philosophers have eaten at least number_of_times_each_philosopher_must_eat times, 
															the simulation stops. If not specified, the simulation stops when a philosopher dies.)

- At least one philosopher

- Philosopher number 1 sits next to philosopher number number_of_philosophers. Any other philosopher number N sits between philosopher number N - 1 and philosopher number N + 1.

- Any state change of a philosopher must be formatted as follows:
	◦ timestamp_in_ms X has taken a fork
	◦ timestamp_in_ms X is eating
	◦ timestamp_in_ms X is sleeping
	◦ timestamp_in_ms X is thinking
	◦ timestamp_in_ms X died
									<!-- (Replace timestamp_in_ms with the current timestamp in milliseconds and X with the philosopher number.) -->

-  
if (someone day)
	exit;
-----------------------------
pthread
Process
deadlock
dinning philosopher
------------------------------
Errors :
	- args ( no <= 0) (number of philosophers <= 200)

===============================================================================================================
+ argv[1] = Number of philosophers
+ argv[2] = Time to die
+ argv[3] = Time to eat
+ argv[4] = Time to sleep
- argv[5] = Number of times each philosopher must eat ( Optional )
================================================================================================================

fake-jesus said : mutex is a thread !!!! change my mind if you can UwU